%%%-------------------------------------------------------------------
%%% @author dgiot
%%% @copyright (C) 2019, shuwa
%%% @doc
%%% API 处理模块 产生时间: {% now "r" %}
%%% @end
%%%-------------------------------------------------------------------
-module(dgiot_{{ mod }}_handler).
-author("shuwa").
-behavior(dgiot_rest).
-compile([{parse_transform, lager_transform}]).

%% API
-export([swagger_{{ mod }}/0]).
-export([handle/4]).

%% API描述
%% 支持二种方式导入
%% 示例:
%% 1. Metadata为map表示的JSON,
%%    dgiot_http_server:bind(<<"/{{ mod }}">>, ?MODULE, [], Metadata)
%% 2. 从模块的priv/swagger/下导入
%%    dgiot_http_server:bind(<<"/swagger_{{ mod }}.json">>, ?MODULE, [], priv)
swagger_{{ mod }}() ->
    [
        dgiot_http_server:bind(<<"/swagger_{{ mod }}.json">>, ?MODULE, [], priv)
    ].


%%%===================================================================
%%% 请求处理
%%%  如果登录, Context 内有 <<"user">>, version
%%%===================================================================

-spec handle(OperationID :: atom(), Args :: map(), Context :: map(), Req :: dgiot_req:req()) ->
    {Status :: dgiot_req:http_status(), Body :: map()} |
    {Status :: dgiot_req:http_status(), Headers :: map(), Body :: map()} |
    {Status :: dgiot_req:http_status(), Headers :: map(), Body :: map(), Req :: dgiot_req:req()}.

handle(OperationID, Args, Context, Req) ->
    Headers = #{},
    case catch do_request(OperationID, Args, Context, Req) of
        {ErrType, Reason} when ErrType == 'EXIT'; ErrType == error ->
            lager:info("do request: ~p, ~p, ~p~n", [OperationID, Args, Reason]),
            Err = case is_binary(Reason) of
                      true -> Reason;
                      false -> list_to_binary(io_lib:format("~p", [Reason]))
                  end,
            {500, Headers, #{ <<"error">> => Err }};
        ok ->
            lager:debug("do request: ~p, ~p ->ok ~n", [OperationID, Args]),
            {200, Headers, #{}, Req};
        {ok, Res} ->
            lager:info("do request: ~p, ~p ->~p~n", [OperationID, Args, Res]),
            {200, Headers, Res, Req};
        {Status, Res} ->
            lager:info("do request: ~p, ~p ->~p~n", [OperationID, Args, Res]),
            {Status, Headers, Res, Req};
        {Status, NewHeaders, Res} ->
            lager:info("do request: ~p, ~p ->~p~n", [OperationID, Args, Res]),
            {Status, maps:merge(Headers, NewHeaders), Res, Req};
        {Status, NewHeaders, Res, NewReq} ->
            lager:debug("do request: ~p, ~p ->~p~n", [OperationID, Args, Res]),
            {Status, maps:merge(Headers, NewHeaders), Res, NewReq}
    end.


%%%===================================================================
%%% 内部函数 Version:API版本
%%%===================================================================

{% for api in apis %}
%% {{ api.tags }} 概要: {{ api.summary }} 描述:{{ api.description }}
%% OperationId:{{ api.operationid }}
%% 请求:{{ api.method }} {{ api.path }}
do_request({{ api.operationid }}, _Args, Context, Req) ->
    Response = maps:get(check_response, Context, #{}),
    dgiot_mock:do_mock(Response, Req);
{% endfor %}

%%  服务器不支持的API接口
do_request(_OperationId, _Args, _Context, _Req) ->
    {error, <<"Not Allowed.">>}.